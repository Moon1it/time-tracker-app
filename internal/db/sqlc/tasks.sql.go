// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    user_uuid,
    name
) VALUES (
    $1,
    $2
) RETURNING uuid
`

type CreateTaskParams struct {
	UserUuid pgtype.UUID `json:"user_uuid"`
	Name     string      `json:"name"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createTask, arg.UserUuid, arg.Name)
	var uuid pgtype.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const getTaskByUUID = `-- name: GetTaskByUUID :one
SELECT uuid, user_uuid, name, duration, is_completed, created_at, updated_at
FROM tasks
WHERE uuid = $1
`

func (q *Queries) GetTaskByUUID(ctx context.Context, taskUuid pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByUUID, taskUuid)
	var i Task
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.Name,
		&i.Duration,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByUserUUID = `-- name: GetTasksByUserUUID :many
SELECT uuid, user_uuid, name, duration, is_completed, created_at, updated_at
FROM tasks
WHERE user_uuid = $1
`

func (q *Queries) GetTasksByUserUUID(ctx context.Context, userUuid pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByUserUUID, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.Uuid,
			&i.UserUuid,
			&i.Name,
			&i.Duration,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskByUUID = `-- name: UpdateTaskByUUID :one
UPDATE tasks
SET name = coalesce($1, name),
    duration = coalesce($2, duration),
    is_completed = coalesce($3, is_completed)
WHERE uuid = $4
RETURNING uuid, user_uuid, name, duration, is_completed, created_at, updated_at
`

type UpdateTaskByUUIDParams struct {
	Name        pgtype.Text `json:"name"`
	Duration    pgtype.Int4 `json:"duration"`
	IsCompleted pgtype.Bool `json:"is_completed"`
	TaskUuid    pgtype.UUID `json:"task_uuid"`
}

func (q *Queries) UpdateTaskByUUID(ctx context.Context, arg UpdateTaskByUUIDParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskByUUID,
		arg.Name,
		arg.Duration,
		arg.IsCompleted,
		arg.TaskUuid,
	)
	var i Task
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.Name,
		&i.Duration,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
